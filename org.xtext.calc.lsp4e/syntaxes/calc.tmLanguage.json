{
	"name": "Calculator DSL",
    "scopeName": "text.html.calc",
    "fileTypes": [
        "calc"
    ],
    "repository": {
        "general": {
            "patterns": [
                {
                    "include": "#linecomment"
                },
                {
                    "include": "#blockcomment"
                },
                {
                    "include": "#number"
                },
                {
                    "include": "#constant"
                },
                {
                    "include": "#function"
                },
                {
                    "include": "#functioncall"
                },
                {
                    "include": "#operator"
                },
                {
                    "include": "#keyword"
                }
            ]
        },
        "linecomment": {
            "name": "comment.line.double-dash.calc",
            "begin": "(^[ \\t]+)?(?=//)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.ts"
				}
			},
			"end": "(?=$)"
        },
        "blockcomment": {
            "name": "comment.block.calc",
            "begin": "/\\*(\\*)?(?!/)",
			"end": "\\*/",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.calc"
                }
            }
        },
        "number": {
            "name": "constant.numeric.calc",
            "match": "(?<![\\d.])\\s0x[a-fA-F\\d]+|\\b\\d+(\\.\\d+)?([eE]-?\\d+)?|\\.\\d+([eE]-?\\d+)?"
        },
        "singlequotestring": {
            "name": "string.quoted.single.calc",
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.calc"
                }
            },
            "end": "'",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.calc"
                }
            },
            "patterns": [
                {
                    "match": "\\\\(\\d{1,3}|.)",
                    "name": "constant.character.escape.calc"
                }
            ]
        },
        "doublequotestring": {
            "name": "string.quoted.double.calc",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.calc"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.calc"
                }
            },
            "patterns": [
                {
                    "match": "\\\\(\\d{1,3}|.)",
                    "name": "constant.character.escape.calc"
                }
            ]
        },
        "function": {
            "name": "meta.function.calc",
            "begin": "\\b(let)(\\s+((\\w(\\w|\\d)*)))?",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.calc"
                },
                "3": {
                    "name": "entity.name.function.calc"
                }
            },
            "end": ":",
            "endCaptures": {
                "0": {
                    "name": "keyword.control.calc"
                }
            },
            "patterns": [
                {
                    "include": "#general"
                }
            ]
        },
        "functioncall": {
            "name": "meta.functioncall.calc",
            "begin": "((\\w(\\w|\\d)*[\\.:])*\\w(\\w|\\d)*)\\(",
            "end": "\\)",
            "patterns": [
                {
                    "include": "#general"
                }
            ]
        },
        "operator": {
            "name": "keyword.operator.calc",
            "match": "(\\+|-|%|#|\\*|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.))"
        },
        "keyword": {
            "name": "keyword.control.calc",
            "match": "\\b(let)\\b"

        },
        "variable": {
            "name": "variable.other.calc",
            "match": "([A-Za-z_][A-Za-z0-9_\\.]*)"
        }
    },
    "patterns": [
        {
            "include": "#general"
        }
    ],
    "uuid": "d3691eb0-1e00-4893-90fc-1b78c6c100b0"
}