/**
* The double value that is closer than any other to E, the base of the natural logarithms.
*/
let E: 2.7182818284590452354

/**
* The double value that is closer than any other to PI, the ratio of the circumference of a circle to its diameter.
*/
let PI: 3.14159265358979323846

/**
* Returns the absolute value of a {@code double} value.
* If the argument is not negative, the argument is returned.
* If the argument is negative, the negation of the argument is returned.
* Special cases:
* <ul><li>If the argument is positive zero or negative zero, the result
* is positive zero.
* <li>If the argument is infinite, the result is positive infinity.
* <li>If the argument is NaN, the result is NaN.</ul>
* In other words, the result is the same as the value of the expression:
* <p>{@code Double.longBitsToDouble((Double.doubleToLongBits(a)<<1)>>>1)}
*
* @param   a   the argument whose absolute value is to be determined
* @return  the absolute value of the argument.
*/
native abs(a)

/**
* Returns the trigonometric sine of an angle.  Special cases:
* <ul><li>If the argument is NaN or an infinity, then the
* result is NaN.
* <li>If the argument is zero, then the result is a zero with the
* same sign as the argument.</ul>
*
* <p>The computed result must be within 1 ulp of the exact result.
* Results must be semi-monotonic.
*
* @param   a   an angle, in radians.
* @return  the sine of the argument.
*/
native sin(a)

/**
* Returns the trigonometric cosine of an angle. Special cases:
* <ul><li>If the argument is NaN or an infinity, then the
* result is NaN.</ul>
*
* <p>The computed result must be within 1 ulp of the exact result.
* Results must be semi-monotonic.
*
* @param   a   an angle, in radians.
* @return  the cosine of the argument.
*/
native cos(a)

/**
* Returns the trigonometric tangent of an angle.  Special cases:
* <ul><li>If the argument is NaN or an infinity, then the result
* is NaN.
* <li>If the argument is zero, then the result is a zero with the
* same sign as the argument.</ul>
*
* <p>The computed result must be within 1 ulp of the exact result.
* Results must be semi-monotonic.
*
* @param   a   an angle, in radians.
* @return  the tangent of the argument.
*/
native tan(a)

/**
* Returns the angle <i>theta</i> from the conversion of rectangular
* coordinates ({@code x},&nbsp;{@code y}) to polar
* coordinates (r,&nbsp;<i>theta</i>).
* This method computes the phase <i>theta</i> by computing an arc tangent
* of {@code y/x} in the range of -<i>pi</i> to <i>pi</i>. Special
* cases:
* <ul><li>If either argument is NaN, then the result is NaN.
* <li>If the first argument is positive zero and the second argument
* is positive, or the first argument is positive and finite and the
* second argument is positive infinity, then the result is positive
* zero.
* <li>If the first argument is negative zero and the second argument
* is positive, or the first argument is negative and finite and the
* second argument is positive infinity, then the result is negative zero.
* <li>If the first argument is positive zero and the second argument
* is negative, or the first argument is positive and finite and the
* second argument is negative infinity, then the result is the
* {@code double} value closest to <i>pi</i>.
* <li>If the first argument is negative zero and the second argument
* is negative, or the first argument is negative and finite and the
* second argument is negative infinity, then the result is the
* {@code double} value closest to -<i>pi</i>.
* <li>If the first argument is positive and the second argument is
* positive zero or negative zero, or the first argument is positive
* infinity and the second argument is finite, then the result is the
* {@code double} value closest to <i>pi</i>/2.
* <li>If the first argument is negative and the second argument is
* positive zero or negative zero, or the first argument is negative
* infinity and the second argument is finite, then the result is the
* {@code double} value closest to -<i>pi</i>/2.
* <li>If both arguments are positive infinity, then the result is the
* {@code double} value closest to <i>pi</i>/4.
* <li>If the first argument is positive infinity and the second argument
* is negative infinity, then the result is the {@code double}
* value closest to 3*<i>pi</i>/4.
* <li>If the first argument is negative infinity and the second argument
* is positive infinity, then the result is the {@code double} value
* closest to -<i>pi</i>/4.
* <li>If both arguments are negative infinity, then the result is the
* {@code double} value closest to -3*<i>pi</i>/4.</ul>
*
* <p>The computed result must be within 2 ulps of the exact result.
* Results must be semi-monotonic.
*
* @param   y   the ordinate coordinate
* @param   x   the abscissa coordinate
* @return  the <i>theta</i> component of the point
*          (<i>r</i>,&nbsp;<i>theta</i>)
*          in polar coordinates that corresponds to the point
*          (<i>x</i>,&nbsp;<i>y</i>) in Cartesian coordinates.
*/
native atan2(y, x)

/**
* Returns the correctly rounded positive square root of a
* {@code double} value.
* Special cases:
* <ul><li>If the argument is NaN or less than zero, then the result
* is NaN.
* <li>If the argument is positive infinity, then the result is positive
* infinity.
* <li>If the argument is positive zero or negative zero, then the
* result is the same as the argument.</ul>
* Otherwise, the result is the {@code double} value closest to
* the true mathematical square root of the argument value.
*
* @param   a   a value.
* @return  the positive square root of {@code a}.
*          If the argument is NaN or less than zero, the result is NaN.
*/
native sqrt(a)

/**
* Returns the natural logarithm (base <i>e</i>) of a {@code double}
* value.  Special cases:
* <ul><li>If the argument is NaN or less than zero, then the result
* is NaN.
* <li>If the argument is positive infinity, then the result is
* positive infinity.
* <li>If the argument is positive zero or negative zero, then the
* result is negative infinity.</ul>
*
* <p>The computed result must be within 1 ulp of the exact result.
* Results must be semi-monotonic.
*
* @param   a   a value
* @return  the value ln&nbsp;{@code a}, the natural logarithm of
*          {@code a}.
*/
native log(a)

/**
* Returns the base 10 logarithm of a `double` value.
* Special cases:
*
*  - If the argument is NaN or less than zero, then the result
* is NaN.
*  - If the argument is positive infinity, then the result is
* positive infinity.
*  - If the argument is positive zero or negative zero, then the
* result is negative infinity.
*  - If the argument is equal to 10 _n_ for
* integer _n_, then the result is _n_.
*
* The computed result must be within 1 ulp of the exact result.
* Results must be semi-monotonic.
*
* @param   a   a value
* @return  the base 10 logarithm of  {@code a}.
* @since 1.5
*/
native log10(a)

/**
* Returns the value of the first argument raised to the power of the
* second argument. Special cases:
*
* <ul><li>If the second argument is positive or negative zero, then the
* result is 1.0.
* <li>If the second argument is 1.0, then the result is the same as the
* first argument.
* <li>If the second argument is NaN, then the result is NaN.
* <li>If the first argument is NaN and the second argument is nonzero,
* then the result is NaN.
*
* <li>If
* <ul>
* <li>the absolute value of the first argument is greater than 1
* and the second argument is positive infinity, or
* <li>the absolute value of the first argument is less than 1 and
* the second argument is negative infinity,
* </ul>
* then the result is positive infinity.
*
* <li>If
* <ul>
* <li>the absolute value of the first argument is greater than 1 and
* the second argument is negative infinity, or
* <li>the absolute value of the
* first argument is less than 1 and the second argument is positive
* infinity,
* </ul>
* then the result is positive zero.
*
* <li>If the absolute value of the first argument equals 1 and the
* second argument is infinite, then the result is NaN.
*
* <li>If
* <ul>
* <li>the first argument is positive zero and the second argument
* is greater than zero, or
* <li>the first argument is positive infinity and the second
* argument is less than zero,
* </ul>
* then the result is positive zero.
*
* <li>If
* <ul>
* <li>the first argument is positive zero and the second argument
* is less than zero, or
* <li>the first argument is positive infinity and the second
* argument is greater than zero,
* </ul>
* then the result is positive infinity.
*
* <li>If
* <ul>
* <li>the first argument is negative zero and the second argument
* is greater than zero but not a finite odd integer, or
* <li>the first argument is negative infinity and the second
* argument is less than zero but not a finite odd integer,
* </ul>
* then the result is positive zero.
*
* <li>If
* <ul>
* <li>the first argument is negative zero and the second argument
* is a positive finite odd integer, or
* <li>the first argument is negative infinity and the second
* argument is a negative finite odd integer,
* </ul>
* then the result is negative zero.
*
* <li>If
* <ul>
* <li>the first argument is negative zero and the second argument
* is less than zero but not a finite odd integer, or
* <li>the first argument is negative infinity and the second
* argument is greater than zero but not a finite odd integer,
* </ul>
* then the result is positive infinity.
*
* <li>If
* <ul>
* <li>the first argument is negative zero and the second argument
* is a negative finite odd integer, or
* <li>the first argument is negative infinity and the second
* argument is a positive finite odd integer,
* </ul>
* then the result is negative infinity.
*
* <li>If the first argument is finite and less than zero
* <ul>
* <li> if the second argument is a finite even integer, the
* result is equal to the result of raising the absolute value of
* the first argument to the power of the second argument
*
* <li>if the second argument is a finite odd integer, the result
* is equal to the negative of the result of raising the absolute
* value of the first argument to the power of the second
* argument
*
* <li>if the second argument is finite and not an integer, then
* the result is NaN.
* </ul>
*
* <li>If both arguments are integers, then the result is exactly equal
* to the mathematical result of raising the first argument to the power
* of the second argument if that result can in fact be represented
* exactly as a {@code double} value.</ul>
*
* <p>(In the foregoing descriptions, a floating-point value is
* considered to be an integer if and only if it is finite and a
* fixed point of the method {@link #ceil ceil} or,
* equivalently, a fixed point of the method {@link #floor
* floor}. A value is a fixed point of a one-argument
* method if and only if the result of applying the method to the
* value is equal to the value.)
*
* <p>The computed result must be within 1 ulp of the exact result.
* Results must be semi-monotonic.
*
* @param   a   the base.
* @param   b   the exponent.
* @return  the value {@code a}<sup>{@code b}</sup>.
*/
native pow(a, b)

/**
* Returns Euler's number <i>e</i> raised to the power of a
* {@code double} value.  Special cases:
* <ul><li>If the argument is NaN, the result is NaN.
* <li>If the argument is positive infinity, then the result is
* positive infinity.
* <li>If the argument is negative infinity, then the result is
* positive zero.</ul>
*
* <p>The computed result must be within 1 ulp of the exact result.
* Results must be semi-monotonic.
*
* @param   a   the exponent to raise <i>e</i> to.
* @return  the value <i>e</i><sup>{@code a}</sup>,
*          where <i>e</i> is the base of the natural logarithms.
*/
native exp(a)

/**
* Returns the smaller of two {@code long} values. That is,
* the result is the argument closer to the value of
* {@link Long#MIN_VALUE}. If the arguments have the same
* value, the result is that same value.
*
* @param   a   an argument.
* @param   b   another argument.
* @return  the smaller of {@code a} and {@code b}.
*/
native min(a, b)

/**
* Returns the greater of two {@code double} values.  That
* is, the result is the argument closer to positive infinity. If
* the arguments have the same value, the result is that same
* value. If either value is NaN, then the result is NaN.  Unlike
* the numerical comparison operators, this method considers
* negative zero to be strictly smaller than positive zero. If one
* argument is positive zero and the other negative zero, the
* result is positive zero.
*
* @param   a   an argument.
* @param   b   another argument.
* @return  the larger of {@code a} and {@code b}.
*/
native max(a, b)

/**
* Returns the arc sine of a value; the returned angle is in the
* range -<i>pi</i>/2 through <i>pi</i>/2.  Special cases:
* <ul><li>If the argument is NaN or its absolute value is greater
* than 1, then the result is NaN.
* <li>If the argument is zero, then the result is a zero with the
* same sign as the argument.</ul>
*
* <p>The computed result must be within 1 ulp of the exact result.
* Results must be semi-monotonic.
*
* @param   a   the value whose arc sine is to be returned.
* @return  the arc sine of the argument.
*/
native asin(a)

/**
* Returns the arc cosine of a value; the returned angle is in the
* range 0.0 through <i>pi</i>.  Special case:
* <ul><li>If the argument is NaN or its absolute value is greater
* than 1, then the result is NaN.</ul>
*
* <p>The computed result must be within 1 ulp of the exact result.
* Results must be semi-monotonic.
*
* @param   a   the value whose arc cosine is to be returned.
* @return  the arc cosine of the argument.
*/
native acos(a)

/**
* Returns the arc tangent of a value; the returned angle is in the
* range -<i>pi</i>/2 through <i>pi</i>/2.  Special cases:
* <ul><li>If the argument is NaN, then the result is NaN.
* <li>If the argument is zero, then the result is a zero with the
* same sign as the argument.</ul>
*
* <p>The computed result must be within 1 ulp of the exact result.
* Results must be semi-monotonic.
*
* @param   a   the value whose arc tangent is to be returned.
* @return  the arc tangent of the argument.
*/
native atan(a)

/**
* Returns the smallest (closest to negative infinity)
* {@code double} value that is greater than or equal to the
* argument and is equal to a mathematical integer. Special cases:
* <ul><li>If the argument value is already equal to a
* mathematical integer, then the result is the same as the
* argument.  <li>If the argument is NaN or an infinity or
* positive zero or negative zero, then the result is the same as
* the argument.  <li>If the argument value is less than zero but
* greater than -1.0, then the result is negative zero.</ul> Note
* that the value of {@code Math.ceil(x)} is exactly the
* value of {@code -Math.floor(-x)}.
*
*
* @param   a   a value.
* @return  the smallest (closest to negative infinity)
*          floating-point value that is greater than or equal to
*          the argument and is equal to a mathematical integer.
*/
native ceil(a)

/**
* Returns the largest (closest to positive infinity)
* {@code double} value that is less than or equal to the
* argument and is equal to a mathematical integer. Special cases:
* <ul><li>If the argument value is already equal to a
* mathematical integer, then the result is the same as the
* argument.  <li>If the argument is NaN or an infinity or
* positive zero or negative zero, then the result is the same as
* the argument.</ul>
*
* @param   a   a value.
* @return  the largest (closest to positive infinity)
*          floating-point value that less than or equal to the argument
*          and is equal to a mathematical integer.
*/
native floor(a)

/**
* Returns a {@code double} value with a positive sign, greater
* than or equal to {@code 0.0} and less than {@code 1.0}.
* Returned values are chosen pseudorandomly with (approximately)
* uniform distribution from that range.
*
* <p>When this method is first called, it creates a single new
* pseudorandom-number generator, exactly as if by the expression
*
* <blockquote>{@code new java.util.Random()}</blockquote>
*
* This new pseudorandom-number generator is used thereafter for
* all calls to this method and is used nowhere else.
*
* <p>This method is properly synchronized to allow correct use by
* more than one thread. However, if many threads need to generate
* pseudorandom numbers at a great rate, it may reduce contention
* for each thread to have its own pseudorandom-number generator.
*
* @return  a pseudorandom {@code double} greater than or equal
* to {@code 0.0} and less than {@code 1.0}.
* @see Random#nextDouble()
*/
native random()

/**
* Returns the hyperbolic sine of a {@code double} value.
* The hyperbolic sine of <i>x</i> is defined to be
* (<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/2
* where <i>e</i> is {@linkplain Math#E Euler's number}.
*
* <p>Special cases:
* <ul>
*
* <li>If the argument is NaN, then the result is NaN.
*
* <li>If the argument is infinite, then the result is an infinity
* with the same sign as the argument.
*
* <li>If the argument is zero, then the result is a zero with the
* same sign as the argument.
*
* </ul>
*
* <p>The computed result must be within 2.5 ulps of the exact result.
*
* @param   x The number whose hyperbolic sine is to be returned.
* @return  The hyperbolic sine of {@code x}.
* @since 1.5
*/
native sinh(x)

/**
* Returns the hyperbolic cosine of a {@code double} value.
* The hyperbolic cosine of <i>x</i> is defined to be
* (<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>)/2
* where <i>e</i> is {@linkplain Math#E Euler's number}.
*
* <p>Special cases:
* <ul>
*
* <li>If the argument is NaN, then the result is NaN.
*
* <li>If the argument is infinite, then the result is positive
* infinity.
*
* <li>If the argument is zero, then the result is {@code 1.0}.
*
* </ul>
*
* <p>The computed result must be within 2.5 ulps of the exact result.
*
* @param   x The number whose hyperbolic cosine is to be returned.
* @return  The hyperbolic cosine of {@code x}.
* @since 1.5
*/
native cosh(x)

/**
* Returns the hyperbolic tangent of a {@code double} value.
* The hyperbolic tangent of <i>x</i> is defined to be
* (<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/(<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>),
* in other words, {@linkplain Math#sinh
* sinh(<i>x</i>)}/{@linkplain Math#cosh cosh(<i>x</i>)}.  Note
* that the absolute value of the exact tanh is always less than
* 1.
*
* <p>Special cases:
* <ul>
*
* <li>If the argument is NaN, then the result is NaN.
*
* <li>If the argument is zero, then the result is a zero with the
* same sign as the argument.
*
* <li>If the argument is positive infinity, then the result is
* {@code +1.0}.
*
* <li>If the argument is negative infinity, then the result is
* {@code -1.0}.
*
* </ul>
*
* <p>The computed result must be within 2.5 ulps of the exact result.
* The result of {@code tanh} for any finite input must have
* an absolute value less than or equal to 1.  Note that once the
* exact result of tanh is within 1/2 of an ulp of the limit value
* of &plusmn;1, correctly signed &plusmn;{@code 1.0} should
* be returned.
*
* @param   x The number whose hyperbolic tangent is to be returned.
* @return  The hyperbolic tangent of {@code x}.
* @since 1.5
*/
native tanh(x)

/**
* Returns sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
* without intermediate overflow or underflow.
*
* <p>Special cases:
* <ul>
*
* <li> If either argument is infinite, then the result
* is positive infinity.
*
* <li> If either argument is NaN and neither argument is infinite,
* then the result is NaN.
*
* </ul>
*
* <p>The computed result must be within 1 ulp of the exact
* result.  If one parameter is held constant, the results must be
* semi-monotonic in the other parameter.
*
* @param x a value
* @param y a value
* @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
* without intermediate overflow or underflow
* @since 1.5
*/
native hypot(x, y)